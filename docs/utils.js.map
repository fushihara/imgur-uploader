{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["const jpgのクオリティ = 95;\r\nexport async function 画像を指定サイズにリサイズ(image: HTMLImageElement, 長辺の長さ上限: number | null, 変換後の型: \"jpg\" | \"png\"): Promise<{ blob: Blob, width: number, height: number }> {\r\n  const canvas = document.createElement(\"canvas\")!;\r\n  const context = canvas.getContext('2d')!;\r\n  let outWidth = image.width, outHeight = image.height;\r\n  if (長辺の長さ上限 != null) {\r\n    if (image.width > image.height) {\r\n      outWidth = 長辺の長さ上限;\r\n      outHeight = image.height * 長辺の長さ上限 / image.width;\r\n    } else {\r\n      outHeight = 長辺の長さ上限;\r\n      outWidth = image.width * 長辺の長さ上限 / image.height;\r\n    }\r\n  }\r\n  canvas.width = outWidth;\r\n  canvas.height = outHeight;\r\n  context.drawImage(image, 0, 0, image.width, image.height, 0, 0, outWidth, outHeight);\r\n  const リサイズ済みのblob = await new Promise<Blob>((resolve, reject) => {\r\n    if (変換後の型 == \"jpg\") {\r\n      canvas.toBlob((cb) => {\r\n        if (cb == null) {\r\n          reject(new Error(`画像をcanvasから作成できませんでした`));\r\n        } else {\r\n          resolve(cb);\r\n        }\r\n      }, \"image/jpeg\", jpgのクオリティ);\r\n    } else if (変換後の型 == \"png\") {\r\n      canvas.toBlob((cb) => {\r\n        if (cb == null) {\r\n          reject(new Error(`画像をcanvasから作成できませんでした`));\r\n        } else {\r\n          resolve(cb);\r\n        }\r\n      }, \"image/png\");\r\n    }\r\n  });\r\n  return {\r\n    blob: リサイズ済みのblob,\r\n    width: outWidth,\r\n    height: outHeight\r\n  };\r\n}\r\nexport async function blobから画像を取得する(ファイル: Blob): Promise<HTMLImageElement> {\r\n  const imageBase64 = await new Promise<string>(resolve => {\r\n    const fr = new FileReader();\r\n    fr.onload = () => {\r\n      // onload内ではe.target.resultにbase64が入っているのであとは煮るなり焼くなり\r\n      const base64 = fr.result as \"\";\r\n      resolve(base64);\r\n    };\r\n    fr.readAsDataURL(ファイル);\r\n  });\r\n  // base64で取れたのを画像に入れる\r\n  const image = await (new Promise<HTMLImageElement>(ok => {\r\n    const image = new Image();\r\n    image.onload = () => {\r\n      ok(image);\r\n    };\r\n    image.src = imageBase64;\r\n  }));\r\n  return image;\r\n}\r\nexport async function 画像をimgurlにアップロードする(画像ファイル: Blob, apiToken: string): Promise<string> {\r\n  //まだアップロードプログレス取れないのつかえね～\r\n  const form = new FormData();\r\n  form.append('image', 画像ファイル);\r\n  const imageUploadResult = await fetch('https://api.imgur.com/3/image', {\r\n    method: 'POST',\r\n    body: form,\r\n    headers: { \"Authorization\": `Client-ID ${apiToken}` }\r\n  }).then(res => res.json());\r\n  console.log(imageUploadResult);\r\n  if (imageUploadResult.success) {\r\n    return imageUploadResult.data.link as string;\r\n  } else {\r\n    return Promise.reject(new Error(\"アップロードに失敗しました。\\n\" + JSON.stringify(imageUploadResult, null, \"  \")));\r\n  }\r\n}\r\n"]}